{"1": "AsyincIO .Relatively new in python .existed or is being built into other languages and runtime environments, such as Go, C#, or Scala. .Not  .threading .Not  .multiproccesing  .cooperative multitasking .", "2": "Differences between threading and asynchronous I/O .T .hreads share data and resources -  .A .synchronous I/O operations do not.  .Threads can be more efficient than asynchronous I/O operations when the tasks that are being executed share data or resources.  .A .synchronous I/O operations can be more efficient than threads when the tasks that are being executed do not share data or resources. .Threading enables concurrency within a process and  .asyincIO . enables concurrency inside a single thread only when it uses IO operations .\u201cUse async IO when you can; use threading when you must\u201d .", "3": "Concurrency and asyncIO .synchronous I/O ., where the thread is blocked while the I/O operation is performed. This means that only one I/O operation can be performed at a time, which can lead to poor performance when there are multiple I/O operations to be performed. .Asynchronous I/O  .allows multiple I/O operations to be performed simultaneously, even though they are all happening on the same thread. This is because  .asyncio . allows I/O operations to be performed without blocking the thread. When an I/O operation is performed asynchronously, the thread is not blocked and can continue to run other tasks. The I/O operation will complete in the background and will notify the thread when it is finished. ."}